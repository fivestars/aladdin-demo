apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ .Chart.Name }}-server
  labels:
    project: {{ .Chart.Name }}
    name: {{ .Chart.Name }}-server
    app: {{ .Chart.Name }}-server
    githash: {{ .Values.deploy.imageTag }}
spec:
  selector:
    matchLabels:
      app: {{ .Chart.Name }}-server
  replicas: {{ .Values.deploy.replicas }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        project: {{ .Chart.Name }}
        name: {{ .Chart.Name }}-server
        app: {{ .Chart.Name }}-server
    spec:
      # Number of seconds for the containers to perform a graceful shutdown,
      # after which it is voilently terminated. This defaults to 30s, most apps may not need to change it
      terminationGracePeriodSeconds: {{ .Values.deploy.terminationGracePeriod }}
      # This is needed when pulling from our ecr repo
      imagePullSecrets:
        - name: aws
      # Only schedule pods on nodes with the affinity: critical-datadog-apm label
      {{ if .Values.affinity }}
      nodeSelector:
        affinity: {{ .Values.affinity }}
      {{ end }}
      containers:
############# aladdin-demo-uwsgi app container ####
## This is a container that runs the falcon aladdin-demo app with uwsgi server
#############################################
      - name: {{ .Chart.Name }}-uwsgi
        # Docker image for this container
        image: {{ .Values.deploy.ecr }}{{ .Chart.Name }}:{{ .Values.deploy.imageTag }}
        workingDir: /home
        # Container port that is being exposed within the node
        ports:
        - containerPort: {{ .Values.app.uwsgi.port }}
          protocol: TCP
        # Mount the configuration file into the docker container
        volumeMounts:
          # Absolute path is used here
          - mountPath: /config/uwsgi.yaml
            name: {{ .Chart.Name }}-uwsgi
            subPath: uwsgi.yaml
{{ if .Values.deploy.withMount }}
          - mountPath: /home
            name: {{ .Chart.Name }}-server
            subPath: app
{{ end }} # /withMount
        envFrom:
          # Load the data from configMap into the runtime environment
          # This allows us to use os.environ["KEY"] to look up variables
          - configMapRef:
              name: {{ .Chart.Name }}
############# nginx server container ########
## This is a container for an nginx server
#############################################
      - name: {{ .Chart.Name }}-nginx
        image: nginx:1.12-alpine
        ports: 
          - containerPort: {{ .Values.app.nginx.port }}
            protocol: TCP
        volumeMounts:
          - mountPath: /etc/nginx/
            name: {{ .Chart.Name }}-nginx
        envFrom:
          - configMapRef:
              name: {{ .Chart.Name }}
        resources:
          requests:
            cpu: 100m
############# end of containers #############
      # Specify volumes that will be mounted in the containers
      volumes:
        - name: {{ .Chart.Name }}-nginx
          configMap:
            name: {{ .Chart.Name }}-nginx
        - name: {{ .Chart.Name }}-uwsgi
          configMap:
            name: {{ .Chart.Name }}-uwsgi
{{ if .Values.deploy.withMount }}
        - name: {{ .Chart.Name }}-server
          persistentVolumeClaim:
            claimName: {{ .Chart.Name }}-nfs-volume-claim
{{ end }} # /withMount
